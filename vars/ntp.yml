---
# .. vim: foldmarker=[[[,]]]:foldmethod=marker

# debops.ntp default variables [[[
# ================================

# .. contents:: Sections
#    :local:


# Global options [[[
# ------------------

# .. envvar:: ntp__daemon_enabled [[[
#
# If ``True``, role will install and configure an NTP daemon. The daemon is not
# required in containerized environments, where the host takes care for setting
# time accurately.
ntp__daemon_enabled: '{{ (tkl_ntp__daemon_enabled|d("True" if (ntp__daemon|d() and ansible_local|d() and
                                    (ansible_local.cap12s|d() and (not ansible_local.cap12s.enabled | bool or
                                     (ansible_local.cap12s.enabled | bool and
                                      "cap_sys_time" in ansible_local.cap12s.list))))
                                else "False"))|bool }}'

                                                                   # ]]]
# .. envvar:: ntp__daemon [[[
#
# Which clock management daemon/program should be setup?
#
# Choices (string):
#
# - ntpdate
# - ntpd
# - openntpd
# - systemd-timesyncd
#
# Set to ``False`` to disable clock management.
ntp__daemon: '{{ tkl_ntp__daemon|d((ansible_local.ntp.daemon
                  if (ansible_local|d() and ansible_local.ntp|d() and
                      ansible_local.ntp.daemon|d())
                  else ("systemd-timesyncd"
                        if (ansible_distribution == "Ubuntu" and
                            ansible_service_mgr == "systemd")
                        else "ntpd"))) }}'

                                                                   # ]]]
# .. envvar:: ntp__ignore_ntpdate [[[
#
# Don't uninstall ``ntpdate`` package if it's installed. Be aware that
# ``ntpdate-debian`` script is executed each time a network interface is
# brought up, this might result in unexpected time jumps forward or backward.
ntp__ignore_ntpdate: '{{ (tkl_ntp__ignore_ntpdate|d("True"))|bool }}'

                                                                   # ]]]
# .. envvar:: ntp__servers [[[
#
# List of NTP servers to synchronize with
# If you use :program:`ntpd`, you can add server options in server strings, for example::
#
#     ntp__servers:
#       - '0.debian.pool.ntp.org iburst minpoll 6 maxpoll 10'
#
# If you're syncing against local servers, recommended options are:
# 'burst iburst minpoll 4 maxpoll 4', where:
#
# ``burst`` and ``iburst``:
#   Get a time sync as fast as possible by sending 8 sync queries with 2 second
#   interval. (Beware though, this is considered as an abuse on public servers!)
#
# ``minpoll``, ``maxpoll``:
#   Min/max interval for sync queries to be sent in normal operation mode. It's
#   defined in seconds as a power of two:
#
#   * 4 -- 16 seconds (minimal allowed)
#   * 5 -- 32 seconds
#   * 6 -- 64 seconds
#
#   and so on.
#
ntp__servers: '{{ tkl_ntp__servers|d(ntp__servers_map["default"])) }}'

                                                                   # ]]]
# .. envvar:: ntp__fudge [[[
#
# :program:`ntpd` specific.
# Fudge local clock if time servers is not available.
ntp__fudge: '{{ (tkl_ntp__fudge|d("False"))|bool }}'

                                                                   # ]]]
                                                                   # ]]]
# Timezone configuration [[[
# --------------------------

# .. envvar:: ntp__timezone [[[
#
# Specify timezone in the format of 'Area/Zone'. Use :command:`timedatectl
# list-timezones` to see a list of possible values. To set the UTC timezone,
# specify it as 'Etc/UTC'.
# If this variable is empty or set to ``False``, the timezone won't be changed.
ntp__timezone: '{{ tkl_ntp__timezone|d("") }}'
                                                                   # ]]]
                                                                   # ]]]
# OpenNTPd configuration [[[
# --------------------------

# .. envvar:: ntp__openntpd_options [[[
#
# Set the ``openntpd`` daemon options.
ntp__openntpd_options: '{{ tkl_ntp__openntpd_options|d("-f /etc/openntpd/ntpd.conf -s") }}'
                                                                   # ]]]
                                                                   # ]]]
# Network accessibility [[[
# -------------------------

# .. envvar:: ntp__listen [[[
#
# List of interfaces :program:`ntpd` should listen on.
# Specify::
#
#     ntp__listen: '*'
#
# to listen on all interfaces.
ntp__listen: '{{ tkl_ntp__listen|d([]) }}'

                                                                   # ]]]
# .. envvar:: ntp__allow [[[
#
# List of hosts/networks in CIDR format to allow access to the NTP port by the
# firewall. If this list is set to ``False``, access will be allowed from
# anywhere. You should probably define a list of networks allowed access to
# mitigate NTP amplification attacks.
ntp__allow: '{{ tkl_ntp__allow|d([]) }}'

                                                                   # ]]]
                                                                   # ]]]
                                                                   # ]]]
