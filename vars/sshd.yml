---
# .. vim: foldmarker=[[[,]]]:foldmethod=marker

# debops.sshd default variables [[[
# =================================

# .. contents:: Sections
#    :local:
#
# .. include:: includes/all.rst


# OpenSSH packages [[[
# --------------------

# .. envvar:: sshd__base_packages [[[
#
# List of base packages that should be installed for OpenSSH support.
sshd__base_packages: '{{ tkl_sshd__base_packages|d([ "openssh-server", "openssh-client" ]) }}'

                                                                   # ]]]
# .. envvar:: sshd__recommended_packages [[[
#
# List of recommended packages that should be installed with OpenSSH.
sshd__recommended_packages: '{{ tkl_sshd__recommended_packages|d([]) }}'

                                                                   # ]]]
# .. envvar:: sshd__optional_packages [[[
#
# List of optional packages that should be installed with OpenSSH.
sshd__optional_packages: '{{ tkl_sshd__optional_packages|d([]) }}'

                                                                   # ]]]
# .. envvar:: sshd__ldap_packages [[[
#
# List of packages related to LDAP support required by OpenSSH.
sshd__ldap_packages: '{{ tkl_sshd__ldap_packages|d([ "ldap-utils" ]
                         if (sshd__authorized_keys_lookup|bool and
                             ("ldap" in sshd__authorized_keys_lookup_type))
                         else []) }}'

                                                                   # ]]]
# .. envvar:: sshd__packages [[[
#
# List of additional packages to install.
sshd__packages: '{{ tkl_sshd__packages|d([]) }}'
                                                                   # ]]]
                                                                   # ]]]
# Host whitelists and allow lists [[[
# -----------------------------------

# .. envvar:: sshd__whitelist [[[
#
# List of IP addresses or CIDR subnets which should be allowed to connect to
# SSH without any restrictions. This list does not disallow connections from
# other hosts. This is a global list.
sshd__whitelist: '{{ tkl_sshd__whitelist|d([]) }}'

                                                                   # ]]]
# .. envvar:: sshd__group_whitelist [[[
#
# List of IP addresses or CIDR subnets which should be allowed to connect to
# SSH without any restrictions. This list does not disallow connections from
# other hosts. This is a group-based list.
sshd__group_whitelist: '{{ tkl_sshd__group_whitelist|d([]) }}'

                                                                   # ]]]
# .. envvar:: sshd__host_whitelist [[[
#
# List of IP addresses or CIDR subnets which should be allowed to connect to
# SSH without any restrictions. This list does not disallow connections from
# other hosts. This is a host-based list.
sshd__host_whitelist: '{{ tkl_sshd__host_whitelist|d([]) }}'

                                                                   # ]]]
# .. envvar:: sshd__allow [[[
#
# List of IP addresses or CIDR subnets that should be allowed to access SSH
# service. If it's set, access from hosts and networks not specified here is
# denied in TCP Wrappers and limited in :command:`iptables`. This is a global list.
sshd__allow: '{{ tkl_sshd__allow|d([]) }}'

                                                                   # ]]]
# .. envvar:: sshd__group_allow [[[
#
# List of IP addresses or CIDR subnets that should be allowed to access SSH
# service. If it's set, access from hosts and networks not specified here is
# denied in TCP Wrappers and limited in :command:`iptables`. This is a group list.
sshd__group_allow: '{{ tkl_sshd__group_allow|d([]) }}'

                                                                   # ]]]
# .. envvar:: sshd__host_allow [[[
#
# List of IP addresses or CIDR subnets that should be allowed to access SSH
# service. If it's set, access from hosts and networks not specified here is
# denied in TCP Wrappers and limited in :command:`iptables`. This is a host list.
sshd__host_allow: '{{ tkl_sshd__host_allow|d([]) }}'
                                                                   # ]]]
                                                                   # ]]]
# TCP Wrappers configuration [[[
# ------------------------------

# .. envvar:: sshd__tcpwrappers_default [[[
#
# If list of allowed hosts is not specified, this value will be set in TCP
# Wrappers for ``sshd`` service. By default any host is allowed to connect.
sshd__tcpwrappers_default: '{{ tkl_sshd__tcpwrappers_default|d("ALL") }}'
                                                                   # ]]]
                                                                   # ]]]
# Firewall (ferm) configuration [[[
# ---------------------------------

# .. envvar:: sshd__ferm_weight [[[
#
# Specify the "weight" of the ``sshd`` firewall rules. The more weight they
# have, he later in the firewall they will be defined. If you change the
# default weight, you will need to remove the old rules manually from the remote
# host.
sshd__ferm_weight: '{{ tkl_sshd__ferm_weight|d("30") }}'

                                                                   # ]]]
# .. envvar:: sshd__ferm_limit [[[
#
# Enable or disable limited SSH access from all hosts in :command:`ip(6)tables`.
# Recent new connections are filtered and when too many new connections are
# created in specified time window, host is added to the recent blocklist.
sshd__ferm_limit: '{{ tkl_sshd__ferm_limit|d(True) }}'

                                                                   # ]]]
# .. envvar:: sshd__ferm_limit_seconds [[[
#
# Length of the time window used by firewall to catch new offenders,
# by default 5 minutes.
sshd__ferm_limit_seconds: '{{ tkl_sshd__ferm_limit_seconds|d(60 * 5) }}'

                                                                   # ]]]
# .. envvar:: sshd__ferm_limit_hits [[[
#
# How many new connections to allow in specified time window.
sshd__ferm_limit_hits: '{{ tkl_sshd__ferm_limit_hits|d("8") }}'

                                                                   # ]]]
# .. envvar:: sshd__ferm_limit_chain [[[
#
# Name of the iptables chain used for filtering SSH connections.
sshd__ferm_limit_chain: '{{ tkl_sshd__ferm_limit_chain|d("filter-ssh") }}'

                                                                   # ]]]
# .. envvar:: sshd__ferm_limit_target [[[
#
# Specify what happens with packets filtered by the firewall that are above the
# specified limit. Either ``REJECT``, ``DROP`` or name of :command:`iptables` chain
# where packets will be sent through.
sshd__ferm_limit_target: '{{ tkl_sshd__ferm_limit_target|d("REJECT") }}'

                                                                   # ]]]
# .. envvar:: sshd__ferm_ports [[[
#
# List of TCP ports to open in the firewall for SSH connections. You can use
# port numbers or service names from :file:`/etc/services`.
sshd__ferm_ports: '{{ tkl_sshd__ferm_ports|d([ "ssh" ]) }}'
                                                                   # ]]]
                                                                   # ]]]
# OpenSSH server configuration [[[
# --------------------------------

# .. envvar:: sshd__ports [[[
#
# List of ports which ``sshd`` will listen on.
sshd__ports: '{{ tkl_sshd__ports|d([ "22" ]) }}'

                                                                   # ]]]
# .. envvar:: sshd__listen [[[
#
# List of IP addresses on which ``sshd`` should listen for new connections. If
# it's empty, ``sshd`` listens on all interfaces.
sshd__listen: '{{ tkl_sshd__listen|d([]) }}'

                                                                   # ]]]
# .. envvar:: sshd__host_keys [[[
#
# List of SSH host keys that should be enabled, in order of preference.
sshd__host_keys: '{{ tkl_sshd__host_keys|d([ "rsa", "dsa", "ecdsa", "ed25519" ]) }}'

                                                                   # ]]]
# .. envvar:: sshd__banner [[[
#
# Path to file which should be displayed before user authentication.
sshd__banner: '{{ tkl_sshd__banner|d("none") }}'

                                                                   # ]]]
# .. envvar:: sshd__log_level [[[
#
# How much information should be logged by ``sshd`` server.
sshd__log_level: '{{ tkl_sshd__log_level|d("INFO") }}'

                                                                   # ]]]
# .. envvar:: sshd__permit_root_login [[[
#
# Specify if access to ``root`` account should be granted. By default ``root``
# can be accessed only using SSH public keys.
sshd__permit_root_login: '{{ tkl_sshd__permit_root_login|d("yes") }}'

                                                                   # ]]]
# .. envvar:: sshd__password_authentication [[[
#
# Enable or disable password authentication.
sshd__password_authentication: '{{ tkl_sshd__password_authentication|d("yes") }}'

                                                                   # ]]]
# .. envvar:: sshd__x11_forwarding [[[
#
# Enable or disable X11 forwarding by the server.
sshd__x11_forwarding: '{{ tkl_sshd__x11_forwarding|d("yes") }}'

                                                                   # ]]]
# .. envvar:: sshd__max_auth_tries [[[
#
# Maximum number of failed authentication attempts allowed by the server.
sshd__max_auth_tries: '{{ tkl_sshd__max_auth_tries|d("6") }}'

                                                                   # ]]]
# .. envvar:: sshd__max_startups [[[
#
# Maximum number of unauthenticated connections (3), after which there's 80%
# probability of next unauthenticated connection to be dropped, finishing at 7,
# after which all new unauthenticated connections will be refused.
sshd__max_startups: '{{ tkl_sshd__max_startups|d("10:30:100") }}'

                                                                   # ]]]
# .. envvar:: sshd__login_grace_time [[[
#
# Time after which unauthenticated sessions are disconnected.
sshd__login_grace_time: '{{ tkl_sshd__login_grace_time|d("120") }}'

                                                                   # ]]]
# .. envvar:: sshd__privilege_separation [[[
#
# Specify if ``sshd`` should use unprivileged processes for incoming session
# authentication. Setting this to ``sandbox`` enables use of additional
# kernel restrictions.
sshd__privilege_separation: '{{ tkl_sshd__privilege_separation|d("yes") }}'

                                                                   # ]]]
# .. envvar:: sshd__custom_options [[[
#
# Additional :manpage:`sshd_config(5)` options specified in a YAML text block format.
sshd__custom_options: '{{ tkl_sshd__custom_options|d() }}'
                                                                   # ]]]
                                                                   # ]]]
# Group-based access control [[[
# ------------------------------

# .. envvar:: sshd__allow_groups [[[
#
# List of UNIX groups which allow connections to SSH service (global).
sshd__allow_groups: '{{ tkl_sshd__allow_groups|d([]) }}'

                                                                   # ]]]
# .. envvar:: sshd__group_allow_groups [[[
#
# List of UNIX groups which allow connections to SSH service (host group).
sshd__group_allow_groups: '{{ tkl_sshd__group_allow_groups|d([]) }}'

                                                                   # ]]]
# .. envvar:: sshd__host_allow_groups [[[
#
# List of UNIX groups which allow connections to SSH service (host).
sshd__host_allow_groups: '{{ tkl_sshd__host_allow_groups|d([]) }}'
                                                                   # ]]]
                                                                   # ]]]
# Authorized keys management [[[
# ------------------------------

# .. envvar:: sshd__authorized_keys [[[
#
# List of files which contain SSH public keys, to be used to authenticate
# remote users.
sshd__authorized_keys: '{{ tkl_sshd__authorized_keys|d(sshd__authorized_keys_system +
                           sshd__authorized_keys_user) }}'

                                                                   # ]]]
# .. envvar:: sshd__authorized_keys_system [[[
#
# List of system-wide files containing SSH public keys. These files are
# expected to be maintained by system administrator and might be used in
# restricted environments (for example SFTPonly accounts).
sshd__authorized_keys_system: '{{ tkl_sshd__authorized_keys_system|d([]) }}'

                                                                   # ]]]
# .. envvar:: sshd__authorized_keys_user [[[
#
# List of user files containing SSH public keys. These files are maintained by
# the users themselves.
sshd__authorized_keys_user: '{{ tkl_sshd__authorized_keys_user|d([
  "%h/.ssh/authorized_keys",
  "%h/.ssh/authorized_keys2"]) }}'
                                                                   # ]]]
                                                                   # ]]]
# System-wide host fingerprints [[[
# ---------------------------------

# .. envvar:: sshd__known_hosts [[[
#
# List of FQDN hostnames that should be scanned to add host fingerprints to the
# system-wide known hosts file (global).
sshd__known_hosts: '{{ tkl_sshd__known_hosts|d([]) }}'

                                                                   # ]]]
# .. envvar:: sshd__group_known_hosts [[[
#
# List of FQDN hostnames that should be scanned to add host fingerprints to the
# system-wide known hosts file (host group).
sshd__group_known_hosts: '{{ tkl_sshd__group_known_hosts|d([]) }}'

                                                                   # ]]]
# .. envvar:: sshd__host_known_hosts [[[
#
# List of FQDN hostnames that should be scanned to add host fingerprints to the
# system-wide known hosts file (host).
sshd__host_known_hosts: '{{ tkl_sshd__host_known_hosts|d([]) }}'

                                                                   # ]]]
# .. envvar:: sshd__known_hosts_file [[[
#
# System-wide file where host fingerprints are stored.
sshd__known_hosts_file: '{{ tkl_sshd__known_hosts_file|d("/etc/ssh/ssh_known_hosts") }}'

                                                                   # ]]]
# .. envvar:: sshd__known_hosts_command [[[
#
# Command used to scan host fingerprints into system-wide known hosts file.
sshd__known_hosts_command: '{{ tkl_sshd__known_hosts_command|d("ssh-keyscan -H -T 10") }}'
                                                                   # ]]]
                                                                   # ]]]
# Encryption parameters [[[
# -------------------------

# .. envvar:: sshd__ciphers_map [[[
#
# Dict with list of ciphers which should be used by the ``sshd`` server,
# depending on available version, ordered from strongest to weakest. Newer version
# supersedes older version.
sshd__ciphers_map: '{{ tkl_sshd__ciphers_map|d({}) }}'

                                                                   # ]]]
# .. envvar:: sshd__ciphers_additional [[[
#
# List of additional key exchange algorithms which should be used by the
# ``sshd`` server, depending on available version, depending on available
# version, ordered from stronger to weaker. Newer version supersedes older
# version.
sshd__ciphers_additional: '{{ tkl_sshd__ciphers_additional|d([]) }}'

                                                                   # ]]]
# .. envvar:: sshd__kex_algorithms_map [[[
#
# Dict with list of key exchange algorithms which should be used by the
# ``sshd`` server, depending on available version, ordered from strongest to
# oldest. Newer version supersedes older version.
sshd__kex_algorithms_map: '{{ tkl_sshd__kex_algorithms_map|d({}) }}'

                                                                   # ]]]
# .. envvar:: sshd__kex_algorithms_additional [[[
#
# List of additional key exchange algorithms which should be used by the
# ``sshd`` server, depending on available version, depending on available
# version, ordered from stronger to weaker. Newer version supersedes older
# version.
sshd__kex_algorithms_additional: '{{ tkl_sshd__kex_algorithms_additional|d([]) }}'

                                                                   # ]]]
# .. envvar:: sshd__macs_map [[[
#
# Dict with list of message authentication code algorithms which should be used
# by the ``sshd`` server, depending on available version, ordered from stronger
# to weaker. Newer version supersedes older version.
sshd__macs_map: '{{ tkl_sshd__macs_map|d({}) }}'

                                                                   # ]]]
# .. envvar:: sshd__macs_additional [[[
#
# List of additional message authentication code algorithms to support
# by the ``sshd`` server, depending on available version, ordered from stronger
# to weaker. Newer version supersedes older version.
sshd__macs_additional: '{{ tkl_sshd__macs_additional|d([]) }}'

                                                                   # ]]]
# .. envvar:: sshd__moduli_minimum [[[
#
# Specify minimum size of Diffie-Hellman parameters available to the SSH
# server. Parameters smaller than the given amount will be removed from the
# :file:`/etc/ssh/moduli` file.
sshd__moduli_minimum: '{{ tkl_sshd__moduli_minimum|d("1022") }}'

                                                                   # ]]]
# .. envvar:: sshd__paranoid [[[
#
# If set to True, only the first item (which is considered the strongest method
# available) from the lists :envvar:`sshd__ciphers_map`,
# :envvar:`sshd__kex_algorithms_map` and :envvar:`sshd__macs_map` will be configured for
# ``sshd``. Use this with care as it will deny access to anyone not able to use
# the first cryptographic method.
# See https://github.com/debops/ansible-sshd/issues/20
sshd__paranoid: '{{ tkl_sshd__paranoid|d(False) }}'
                                                                   # ]]]
                                                                   # ]]]
# Authorized key lookup configuration [[[
# ---------------------------------------

# .. envvar:: sshd__authorized_keys_lookup [[[
#
# Enable support for looking up authorized public keys in external data sources
# (currently LDAP is supported). This function works only with OpenSSH 6.2+.
sshd__authorized_keys_lookup: '{{ tkl_sshd__authorized_keys_lookup|d(False) }}'

                                                                   # ]]]
# .. envvar:: sshd__authorized_keys_lookup_user [[[
#
# System user account which will be used to look up authorized keys.
sshd__authorized_keys_lookup_user: '{{ tkl_sshd__authorized_keys_lookup_user|d("sshd-lookup") }}'

                                                                   # ]]]
# .. envvar:: sshd__authorized_keys_lookup_group [[[
#
# System group which will be used to look up authorized keys.
sshd__authorized_keys_lookup_group: '{{ tkl_sshd__authorized_keys_lookup_group|d("sshd-lookup") }}'

                                                                   # ]]]
# .. envvar:: sshd__authorized_keys_lookup_home [[[
#
# Home directory used by authorized key lookup user.
sshd__authorized_keys_lookup_home: '{{ tkl_sshd__authorized_keys_lookup_home|d("/var/run/" + sshd__authorized_keys_lookup_user) }}'

                                                                   # ]]]
# .. envvar:: sshd__authorized_keys_lookup_type [[[
#
# List of lookup scripts that should be enabled on a host.
sshd__authorized_keys_lookup_type: '{{ tkl_sshd__authorized_keys_lookup_type|d([ "ldap" ]) }}'
                                                                   # ]]]
                                                                   # ]]]
# LDAP lookup configuration [[[
# -----------------------------

# .. envvar:: sshd__ldap_domain [[[
#
# Base DNS domain to use for LDAP BaseDN generation.
sshd__ldap_domain: '{{ tkl_sshd__ldap_domain|d(ansible_domain) }}'

                                                                   # ]]]
# .. envvar:: sshd__ldap_base [[[
#
# LDAP base used for BaseDN generation.
sshd__ldap_base: '{{ tkl_sshd__ldap_base|d("dc=" + sshd__ldap_domain.split(".") | join(",dc=")) }}'

                                                                   # ]]]
# .. envvar:: sshd__ldap_bind_basedn [[[
#
# LDAP BaseDN of the host account used to bind to the server.
sshd__ldap_bind_basedn: '{{ tkl_sshd__ldap_bind_basedn|d("ou=Machines," + sshd__ldap_base) }}'

                                                                   # ]]]
# .. envvar:: sshd__ldap_bind_cn [[[
#
# Host account name in LDAP.
sshd__ldap_bind_cn: '{{ tkl_sshd__ldap_bind_cn|d("cn=" + ansible_hostname) }}'

                                                                   # ]]]
# .. envvar:: sshd__ldap_bind_dn [[[
#
# Machine entry used to bind to the LDAP server.
sshd__ldap_bind_dn: '{{ tkl_sshd__ldap_bind_dn|d(sshd__ldap_bind_cn + "," + sshd__ldap_bind_basedn) }}'

                                                                   # ]]]
# .. envvar:: sshd__ldap_bind_basepw [[[
#
# Base path to file with host LDAP password in ``secret/`` directory. See
# debops.secret_ Ansible role for more details.
sshd__ldap_bind_basepw: '{{ tkl_sshd__ldap_bind_basepw|d(secret + "/credentials/" +
                            ansible_fqdn + "/ldap/host/binddn/" +
                            sshd__ldap_bind_dn + ".password") }}'

                                                                   # ]]]
# .. envvar:: sshd__ldap_bind_pw [[[
#
# Machine password used for binding to LDAP database.
sshd__ldap_bind_pw: '{{ tkl_sshd__ldap_bind_pw|d(lookup("password", sshd__ldap_bind_basepw +
                        " length=" + sshd__ldap_password_length)) }}'

                                                                   # ]]]
# .. envvar:: sshd__ldap_bind_pw_file [[[
#
# Path to file which stores machine bind password on remote host.
sshd__ldap_bind_pw_file: '{{ tkl_sshd__ldap_bind_pw_file|d("/etc/ssh/ldap_authorized_keys_bindpw") }}'

                                                                   # ]]]
# .. envvar:: sshd__ldap_password_length [[[
#
# Length of generated LDAP machine password.
sshd__ldap_password_length: '{{ tkl_sshd__ldap_password_length|d("48") }}'

                                                                   # ]]]
# .. envvar:: sshd__ldap_filter [[[
#
# Active ``ldapsearch`` filter used to select correct account while looking up
# the SSH public key.
sshd__ldap_filter: '{{ tkl_sshd__ldap_filter|d(sshd__ldap_filter_map["uid"]) }}'

                                                                   # ]]]
# .. envvar:: sshd__ldap_filter_map [[[
#
# Dict with set of available LDAP filters that can be used to lookup the SSH
# public key.
# uid: User account by uid attribute only
# service: User account needs authorizedService attribute
# host: User account needs host attribute
# service+host: User account needs both authorizedService and host attributes.
sshd__ldap_filter_map: '{{ tkl_sshd__ldap_filter_map|d({
  "uid": "(&(objectClass=posixAccount)(uid=$username))"
  "service": "(&(objectClass=posixAccount)(uid=$username)(authorizedService=$service))"
  "host": "(&(objectClass=posixAccount)(uid=$username)(|(host=$hostname)(host=$fqdn)(host=\\*.$domain)(host=\\*)))"
  "service+host": "(&(objectClass=posixAccount)(uid=$username)(authorizedService=$service)(|(host=$hostname)(host=$fqdn)(host=\\*.$domain)(host=\\*)))"}) }}'
                                                                   # ]]]
                                                                   # ]]]
# Match conditional blocks [[[
# ----------------------------

# .. envvar:: sshd__match_list [[[
#
# List of conditional ``Match`` blocks to include in ``sshd_config``.
# Required parameters:
#
# - ``match``: specify User, Group, or other Match arguments which should
#   activate a given configuration block.
#
# - ``options``: YAML text block which contains :manpage:`sshd_config(5)` options
#   active in a given Match block.
#
sshd__match_list: '{{ tkl_sshd__match_list|d([]) }}'

                                                                   # ]]]
# .. envvar:: sshd__match_group_sftponly [[[
#
# Default ``Match`` conditional block which defines configuration for SFTPonly
# accounts.
sshd__match_group_sftponly: '{{ tkl_sshd__match_group_sftponly|d({
  match: "Group sftponly"
  options: |
    AuthorizedKeysFile sshd__authorized_keys_system | join(" ")
    ChrootDirectory %h
    X11Forwarding no
    AllowAgentForwarding no
    AllowTcpForwarding no
    PermitTunnel no
    ForceCommand internal-sftp}) }}'
# ]]]
# ]]]
                                                                   # ]]]
